# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

# Ref for intended theme scope meanings for textMate: https://macromates.com/manual/en/language_grammars
# mnt/c/Users/andre/github/language-guidedtrack

#Note that tabs/spaces are not interchangeable in textMate grammars.
'scopeName': 'source.guidedtrack'
'name': 'GuidedTrack'
'fileTypes': [
  'guidedtrack',
  'gt'
]
'firstLineMatch': '--.*$'
'patterns': [
  {
    'comment': 'multi-line highlighting for organizational use.'
    'name': 'meta.require.guidedtrack'
    'contentName': 'markup.italic.guidedtrack'
    'begin': '--select'
    'beginCaptures': 'markup.bold.guidedtrack'
    'end': '--endSelect'
    'endCaptures': 'markup.bold.guidedtrack'
  }
  {
    'comment': 'creates error-like highlighting for comments to increase visibility.'
    'match': '--notice\! .*'
    'name': 'invalid.illegal.spaces.guidedtrack'
  }
  {
    'comment': 'commenting'
    'match': '--.*$'
    'name': 'comment.line.guidedtrack'
  }
  {
    'comment': 'commands'
    'match': '\\*(confirm|component|click|blank|multiple|quit|other|shuffle|yaxis|xaxis|trendline|clear|email|body|cancel|login|navigation|randomize|group|return|everytime|share|events|startup|settings|success|error|throwaway|page|reset|list\\:\\s?expandable|list|list\\:\\s?ordered)\\b$'
    'name': 'keyword.control.guidedtrack'
  }
  {
    'comment': 'commands with : following'
    'match': '(\\*)(question|type|before|after|min|max|tip|time|date|icon|countdown|header|default|tags|summary|chart|data|color|opacity|ticks|position|rollovers|wait|image|caption|repeat|subject|to|when|identifier|every|experiment|group|program|set|required|video|button|maintain|audio|start|hide|navigation|point|progress|randomize|group|repeat|title|picture|description|back|menu|classes|trigger|send|service|path|method|label|goto|xaxis|yaxis|switch|points)(\\:)\\s?(.*)'
    'captures':
      0:
        'name': 'keyword.control.guidedtrack'
      1:
        'name': 'keyword.control.guidedtrack'
      2:
        'name': 'keyword.control.guidedtrack'
      3:
        'name': 'keyword.control.guidedtrack'
      4:
        'name': 'constant.character.guidedtrack'
  }
  {
    'comment': 'defining variables'
    'match': '(>>)\\s?(\\w+)(\\[?.*\\]?)\\s?(=)\\s?(.*)'
    'captures':
      0:
        'name': 'variable.other.object.guidedtrack'
      1:
        'name': 'keyword.control.guidedtrack'
      2:
        'name': 'variable.function.guidedtrack'
      3:
        'name': 'constant.other.color.guidedtrack'
      4:
        'name': 'variable.function.guidedtrack'
        'patterns': [
          {'include': '#signs'}
        ]
      5:
        'name': 'variable.function.guidedtrack'
        'patterns': [
          {'include': '#strings'}
          {'include': '#numbers'}
          {'include': '#interpolated'}
          {'include': '#signs'}
        ]
  }
  {
    'comment': 'performing functions on variables, like .shuffle [make . diff color?]'
    'match': '(>>)(.*)(\\.)(.*)'
    'captures':
      0:
        'name': 'variable.function.guidedtrack'
      1:
        'name': 'keyword.control.guidedtrack'
      2:
        'name': 'variable.function.guidedtrack'
      3:
        'name': 'constant.other.color.guidedtrack'
      4:
        'name': 'markup.bold.guidedtrack'
  }
  {'include': '#ifWhileFor'} #I put ifWhileFors in the repository as an experiment; should probably put all in repo, or all repeated in main patterns.
  {'include': '#illegalSpace'}
  {'include': '#save'}
  {'include': '#answers'}
  {'include': '#interpolated'}
  {'include': '#notice'}
  {'include': '#highlight'}


]

'repository':
  'strings':{
    'name': 'string.quoted.guidedtrack'
    'contentName': 'string.quoted.guidedtrack'
    'begin': '"'
    'beginCaptures': 'string.quoted.guidedtrack'
    'end': '"'
    'endCaptures': 'string.quoted.guidedtrack'
  }
  'numbers':{
    'name': 'constant.numeric.guidedtrack'
    'match': '\\b(-)?[0-9.]+\\b'
  }
  'interpolated':{
    'name': 'constant.character.guidedtrack'
    'contentName': 'constant.character.guidedtrack'
    'begin': '\\{'
    'beginCaptures': 'constant.character.guidedtrack'
    'end': '\\}'
    'endCaptures': 'constant.character.guidedtrack'
  }
  'signs':{
    'name': 'constant.other.color.guidedtrack'
    'match': '<|>|=|<=|>=|\\bin\\b|\\band\\b|\\bor\\b|\\bnot\\b|\\+|-|\\*|\\/'
  }
  'ifWhileFor': {
    'comment': 'ifs, whiles, and fors'
    'patterns':[
      {
        'comment': '*if/*while/*for functions [add support for numbers, strings, logical operater highlighting following]'
        'match': '\\*(if|while|for)\\:\\s?(.*)'
        'captures':
          0:
            'name': 'keyword.control.guidedtrack'
          1:
            'name': 'keyword.control.guidedtrack'
          2:
            'name': 'variable.function.guidedtrack'
            'patterns': [
              {'include': '#strings'}
              {'include': '#numbers'}
              {'include': '#signs'}
            ]
      }
    ]
  }
  'illegalSpace':{
    'name': 'invalid.illegal.spaces.guidedtrack'
    'match': '^\\s? .*$'
  }
  'save':{
    'patterns':[
      {
        'match': '\\*(save)\\:\\s?(\\w+)\\s'
        'captures':
          0: 'name': 'keyword.control.guidedtrack'
          1: 'name': 'keyword.control.guidedtrack'
          2: 'name': 'variable.function.guidedtrack'
      }
    ]
  }
  'answers':{
    'patterns':[
      {
        'match': '\\*(answers)\\:\\s?(.+)\\s'
        'captures':
          0: 'name': 'keyword.control.guidedtrack'
          1: 'name': 'keyword.control.guidedtrack'
          2:
            'name': 'variable.function.guidedtrack'
            'patterns': [
              {'include': '#strings'}
              {'include': '#numbers'}
              {'include': '#interpolated'}
              {'include': '#signs'}
            ]
      }
    ]
  }

'limitLineLength': false
